// Copyright (c) 2020 HITCON Agent Contributors
// See CONTRIBUTORS file for the list of HITCON Agent Contributors

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package kofserver;

enum GameState {
  // Error is any (unrecoverable) error condition.
  GAME_ERROR = 0;

  GAME_CREATED = 1;
  GAME_STARTING = 2;
  GAME_RUNNING = 3;
  GAME_REBOOTING = 4;
  GAME_DESTROYING = 5;
  GAME_DESTROYED = 6;
}

// Game represents the information regarding each game.
// Each "wipe" of the Virtual Machine state represents one game.
// Every new game starts with a blank virtual machine.
message Game {
  // Name of the game, used to identify the game.
  string name = 1;

  // State of the game.
  GameState state = 2;
}

// PlayerScore reports the various score of a user.
message PlayerScore {
  // Name of the player that we are reporting.
  string playerName = 1;

  // The total score.
  int64 score = 2;

  // PID uptime in seconds.
  int64 pidUptime = 3;

  // Port uptime in seconds.
  int64 portUptime = 4;
}  

// ================== API Messages ==================

// NOTE: Req = Request, Rep = Reply/Response

// ErrorCode is the error code used in the APIs.
enum ErrorCode {
  ERROR_NONE = 0; // No error, great.
  ERROR_NOT_IMPLEMENTED = 1; // The author is busy/too lazy.
  ERROR_CREATE_GAME = 2; // Failed to create game.
  ERROR_USER_ALREADY_EXISTS = 3; // User already exists when creating user.
}

// Rep (Reply) is a generic response for RPC calls that uses it.
message Rep {
  ErrorCode error = 1;
}

message CreateGameReq {
  string gameName = 1;

  // scenarioName is the scenario that we'll run for this game.
  // scenario defines the VM image used and the various scoring rules.
  string scenarioName = 2;
}

message StartGameReq {
  string gameName = 1;
}

message DestroyGameReq {
  string gameName = 1;
}

message QueryGameReq {
  // Leave empty to list all games.
  string gameName = 1;
}

message QueryGameRep {
  // Reply to indicate general status/error.
  Rep reply = 1;

  // The query result.
  repeated Game games = 2;
}

message PlayerIssueSCReq {
  // Which game?
  string gameName = 1;

  // Who's issuing it?
  string playerName = 2;

  // The shell code, base64 encoded.
  string shellCode = 3;
}

message PlayerIssueSCRep {
  // General status
  Rep reply = 1;

  // TODO: More fields on PID and stuffs?
}

message QueryScoreReq {
  // Name of the game to limit result to.
  // Leave it empty to query the sum of scores in all games that happened.
  string gameName = 1;

  // Name of the player to query.
  // Leave it empty to retrieve the score for all players.
  string playerName = 2;
}

message QueryScoreRep {
  // Reply to indicate the general status.
  Rep reply = 1;

  // The list of scores.
  repeated PlayerScore scores = 2;
}

service KOFServer {
  // Game lifecycle management APIs.
  // The usual call sequence is:
  // CreateGame() => StartGame() => (Player interacts with the game)
  // => DestroyGame()
  rpc CreateGame(CreateGameReq) returns (Rep) {}
  rpc StartGame(StartGameReq) returns(Rep) {}
  rpc DestroyGame(DestroyGameReq) returns (Rep) {}

  // QueryGame could be used to list all games or a specific game.
  rpc QueryGame(QueryGameReq) returns (QueryGameRep) {}
  
  // Player interactions
  // PlayerIssueSC allows the player to run shell code on the host.
  rpc PlayerIssueSC(PlayerIssueSCReq) returns (PlayerIssueSCRep) {}
  // TODO: rpc PlayerIssueCmd(PlayerIssueCmdReq) returns (PlayerIssueCmdRep)
  // TODO: rpc PlayerIssueURL(playerIssueURLReq) returns (PlayerIssueURLRep)

  // Scoreboard related
  rpc QueryScore(QueryScoreReq) returns (QueryScoreRep) {}
}